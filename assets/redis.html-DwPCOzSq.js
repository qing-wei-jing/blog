import{_ as a,c as s,a as i,o as n}from"./app-BBLtf-4t.js";const r={};function l(t,e){return n(),s("div",null,e[0]||(e[0]=[i(`<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>redis</span></a></h1><h2 id="redis的3种特殊数据结构介绍" tabindex="-1"><a class="header-anchor" href="#redis的3种特殊数据结构介绍"><span>redis的3种特殊数据结构介绍</span></a></h2><h3 id="_1-geospecial" tabindex="-1"><a class="header-anchor" href="#_1-geospecial"><span>1.Geospecial</span></a></h3><h4 id="_1-介绍-是什么" tabindex="-1"><a class="header-anchor" href="#_1-介绍-是什么"><span>1.介绍，是什么</span></a></h4><p>Redis的Geospatial（地理空间）功能是一组专门用于处理地理位置数据的命令，基于Redis的有序集合(Sorted Set)数据结构实现。 它允许你存储地理坐标（经度和纬度），并执行各种基于位置的计算和查询。</p><div class="language-redis line-numbers-mode" data-highlighter="prismjs" data-ext="redis"><pre><code class="language-redis"><span class="line"># GEOADD：添加一个或多个地理空间位置到指定的key中</span>
<span class="line">GEOADD cities 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span>
<span class="line"># GEOPOS：获取一个或多个位置的地理坐标</span>
<span class="line">GEOPOS cities &quot;Palermo&quot; &quot;Catania&quot;</span>
<span class="line"># GEODIST：计算两个位置之间的距离</span>
<span class="line">GEODIST cities &quot;Palermo&quot; &quot;Catania&quot; km</span>
<span class="line"># GEORADIUS：以给定的经纬度为中心，查找指定半径内的位置</span>
<span class="line">GEORADIUS cities 15 37 100 km</span>
<span class="line"># GEORADIUSBYMEMBER：以给定的成员为中心，查找指定半径内的位置</span>
<span class="line">GEORADIUSBYMEMBER cities &quot;Palermo&quot; 200 km</span>
<span class="line"># GEOHASH：获取一个或多个位置的Geohash值</span>
<span class="line">GEOHASH cities &quot;Palermo&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景"><span>2.应用场景</span></a></h4><ol><li>附近的人/地点搜索：</li></ol><ul><li>查找用户周围5公里内的餐厅</li><li>显示附近的加油站或ATM机</li><li>社交应用中查找附近的朋友</li></ul><ol start="2"><li>配送和物流</li></ol><ul><li>查找用户周围5公里内的餐厅</li><li>显示附近的加油站或ATM机</li></ul><h4 id="_3-底层的数据结构" tabindex="-1"><a class="header-anchor" href="#_3-底层的数据结构"><span>3.底层的数据结构</span></a></h4><p>Geospecial的底层数据结构是Zset(有序集合)</p><p>所有 GEO 命令实际上都是操作一个特殊的 Sorted Set：<br> Key 对应 Sorted Set 的名称<br> Member 是地点名称（如&quot;北京&quot;、&quot;上海&quot;）<br> Score 是经过 Geohash 编码后的 52 位整数值</p><p>Redis 使用 Geohash 将二维的经纬度转换为一维的分数(score)：<br> 经纬度标准化：<br> 经度范围 [-180,180] → 映射到 [0,2^32]<br> 纬度范围 [-90,90] → 映射到 [0,2^32]</p><p>交替编码：<br> 将经度和纬度的二进制位交替排列<br> 例如：经度比特1 → 纬度比特1 → 经度比特2 → 纬度比特2 → ...</p><p>生成52位整数：<br> Redis 使用 52 位整数表示（对应 double 类型的精度）<br> 26位来自经度，26位来自纬度</p><p>例如存储坐标（经度13.361389，纬度38.115556）：<br> 1.标准化坐标<br> 2.转换为二进制表示<br> 3.交替组合经度和纬度比特<br> 4.生成最终的52位整数作为Sorted Set的score</p><p>为什么选择这种设计？</p><p>高效的范围查询：<br> Geohash 具有&quot;前缀相似性&quot;：附近的位置有相似的hash值<br> 使用ZRANGEBYSCORE可以高效查询附近位置</p><p>内存效率： 相比单独存储经纬度，使用一个score更节省空间 复用已有的Sorted Set数据结构</p><p>计算优化： 距离计算时可以直接解码出原始坐标 使用Haversine公式计算实际距离</p><h3 id="_2-hyperloglog" tabindex="-1"><a class="header-anchor" href="#_2-hyperloglog"><span>2.hyperloglog</span></a></h3><h4 id="_1-介绍-是什么-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-是什么-1"><span>1.介绍，是什么</span></a></h4><p>HyperLogLog 是 Redis 提供的一种概率性基数统计数据结构，用于高效地估计一个集合中不重复元素的数量（基数统计）。</p><p>核心特点：<br> 极低的内存占用：统计上亿级别的基数只需约 12KB 内存<br> 固定内存消耗：无论统计多少元素，内存占用基本恒定<br> 概率性算法：有约 0.81% 的标准误差<br> 支持合并：多个 HyperLogLog 可以合并计算总基数</p><h4 id="_2-应用场景-1" tabindex="-1"><a class="header-anchor" href="#_2-应用场景-1"><span>2.应用场景</span></a></h4><p>1.大规模的uv统计</p><ul><li>网站uv统计</li><li>文章阅读量</li><li>广告曝光 2.大数据去重</li><li>搜索引擎：统计不同搜索查询的数量</li><li>电商平台：统计不同搜索关键词的数量</li><li>日志分析：统计不同错误类型的出现次数</li></ul><h4 id="_3-底层的数据结构-1" tabindex="-1"><a class="header-anchor" href="#_3-底层的数据结构-1"><span>3.底层的数据结构</span></a></h4><p>有两种编码格式来优化不同场景下的存储</p><p>基本工作流程</p><p>1.哈希计算：对输入元素执行64位哈希（Redis使用MurmurHash64A）如果是稀疏矩阵，则使用32位哈希<br> 2.寄存器选择：前14位作为寄存器索引（2^14=16384个寄存器）<br> 3.前导零计数：计算剩余50位中第一个1出现的位置<br> 4.寄存器更新：如果新值大于当前寄存器值，则更新</p><h3 id="_3-bitmap" tabindex="-1"><a class="header-anchor" href="#_3-bitmap"><span>3.bitmap</span></a></h3><h4 id="_1-介绍-是什么-2" tabindex="-1"><a class="header-anchor" href="#_1-介绍-是什么-2"><span>1.介绍，是什么</span></a></h4><p>Redis的Bitmap实际上是基于String类型实现的，将字符串视为一个由二进制位组成的数组，每个位置可以存储0或1，用来处理二进制的数据</p><h4 id="_2-应用场景-2" tabindex="-1"><a class="header-anchor" href="#_2-应用场景-2"><span>2.应用场景</span></a></h4><ol><li>横向统计 某一个用户存储多个状态值(不推荐)<br> 签到场景为例，用户的id为key，时间为offset偏移值，value为1代表签到，0代表未签到，但是这样维护起来很麻烦，每个用户都要维护一个bitmap</li><li>纵向统计 每个key值作为业务标识，offset为用户的uid (推荐)<br> 比如短视频平台，对每个视频的标识为key，然后uid作为偏移量，value为1代表该用户喜欢该视频，0代表不喜欢该视频</li><li>实现一个简单的布隆过滤器(利用位数组的特性)</li></ol><h4 id="_3-底层的数据结构-2" tabindex="-1"><a class="header-anchor" href="#_3-底层的数据结构-2"><span>3.底层的数据结构</span></a></h4><p>底层数据结构是String</p><p>假设执行</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">SETBIT mybitmap <span class="token number">10</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>内存中的实际存储情况</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">字节偏移量：0        1</span>
<span class="line">bit布局：  00000000 01000000</span>
<span class="line">bit索引：  0-7      8-15</span>
<span class="line">第10位被设为1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动扩展机制：<br> 当设置的offset超过当前字符串长度时，Redis会自动扩展字符串并用0填充间隙<br> 扩展是以字节为单位的，即使只设置一个bit也可能导致多个字节的分配</p><p>内存预分配：<br> Redis采用预分配策略减少内存重分配次数<br> 每次扩展时可能会分配比实际需要更多的空间</p><p>稀疏位图处理：<br> 对于非常大的offset，Redis会分配中间所有必要的字节<br> 这可能导致稀疏位图实际占用内存比预期大</p><p>与普通String的异同</p><table><thead><tr><th>特性</th><th>Bitmap视角</th><th>String视角</th></tr></thead><tbody><tr><td>存储内容</td><td>二进制位数组</td><td>字节数组</td></tr><tr><td>访问方式</td><td>按bit偏移量</td><td>按字节偏移量</td></tr><tr><td>扩展单位</td><td>bit(实际扩展字节)</td><td>字节</td></tr><tr><td>典型操作</td><td>位运算</td><td>追加、截取等</td></tr></tbody></table>`,49)]))}const p=a(r,[["render",l],["__file","redis.html.vue"]]),h=JSON.parse('{"path":"/backend/redis.html","title":"redis","lang":"zn-ch","frontmatter":{},"git":{"updatedTime":1753888751000,"contributors":[{"name":"hmw","username":"hmw","email":"major@2025","commits":2,"url":"https://github.com/hmw"},{"name":"何力凯","username":"","email":"11961954+hlknb123@user.noreply.gitee.com","commits":2}],"changelog":[{"hash":"11e11ec00bbe40069e6cbb3da433b7ee3b265c90","time":1753888751000,"email":"11961954+hlknb123@user.noreply.gitee.com","author":"何力凯","message":"redis的特殊数据结构"},{"hash":"95ddafe2a9f5163d1d1e41e5c11ad5c8b42a3478","time":1753888698000,"email":"11961954+hlknb123@user.noreply.gitee.com","author":"何力凯","message":"redis的特殊数据结构"},{"hash":"8857dbfd50eea72e870a16f5a5ed5317a01d39ee","time":1753873709000,"email":"major@2025","author":"hmw","message":"redis"},{"hash":"161815a6cd25a480b84d98997547e99f20dae4e2","time":1753869307000,"email":"major@2025","author":"hmw","message":"test"}]},"filePathRelative":"backend/redis.md"}');export{p as comp,h as data};
